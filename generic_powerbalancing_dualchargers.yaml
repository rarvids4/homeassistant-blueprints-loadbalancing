blueprint:
  domain: automation
  name: PhaseMeasurement + SolarCells + Dual Chargers
  description: This automation connects A generic interface and Easee for PV load balancing.
    <br><br>Need to have integrations with Easee and Tibber or similar up and running.
  source_url: https://github.com/rarvids4/homeassistant-blueprints-loadbalancing/blob/main/generic_powerbalancing_dualchargers.yaml
  input:
    isolarpower:
      name: Solar power sensor
      description: 'By default: sensor.solaredge_solar_power'
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
      default: sensor.solaredge_solar_power
    iconsumptionpower:
      name: Consumption power sensor
      description: 'By default: sensor.power_tibber'
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
      default: sensor.power_tibber
    il1:
      name: L1 phase current
      description: 'By default: sensor.current_l1_tibber'
      selector:
        entity:
          domain: sensor
          device_class: current
          multiple: false
      default: sensor.current_l1_tibber
    il2:
      name: L2 phase current
      description: 'By default: sensor.current_l2_tibber'
      selector:
        entity:
          domain: sensor
          device_class: current
          multiple: false
      default: sensor.current_l2_tibber
    il3:
      name: L3 phase current
      description: 'By default: sensor.current_l3_tibber'
      selector:
        entity:
          domain: sensor
          device_class: current
          multiple: false
      default: sensor.current_l3_tibber
    ichargerpower:
      name: Easee charging power sensor
      description: 'By default (kW): sensor.<your easee name>_power'
      selector:
        entity:
          domain: sensor
          device_class: power
          multiple: false
    ichargerdynamiclimit:
      name: Master Charger Circuit limit sensor
      description: 'By default: sensor.<your easee name>_dynamic_circuit_limit'
      selector:
        entity:
          domain: sensor
          device_class: current
          multiple: false
    ichargerstatus:
      name: Master Charger
      description: 'By default: sensor.<your easee name>_status'
      selector:
        entity:
          domain: sensor
          multiple: false
    ichargercurrentactualslave:
      name: Slave Charge Current
      description: 'By default: sensor.<your easee name>_current'
      selector:
        entity:
          domain: sensor
          device_class: current
          multiple: false
      default: sensor.current_Renault_zoe
    ichargercurrentactual:
      name: Master Charge Current
      description: 'By default: sensor.<your easee name>_current'
      selector:
        entity:
          domain: sensor
          device_class: current
          multiple: false
      default: sensor.current_Renault_zoe
    imaxfuse:
      name: 'Max fuse size in the house in Ampere:'
      description: This is the fuse size of the house
      selector:
        number:
          min: 10
          max: 64
          step: 1.0
          unit_of_measurement: 'A'
          mode: slider
      default: 20
    itimestart:
      name: Activate time
      description: Set the time you want the load balancing to activate. This is important
        to avoid low charging currents during nighttime.
      default: 00:00:00
      selector:
        time: {}
    itimeend:
      name: Deactivate time
      description: Set the time you want the load balancing to deactivate. This is
        important to avoid low charging currents during nighttime.
      default: '23:59:59'
      selector:
        time: {}
trigger:
- platform: state
  entity_id: 
  - !input 'iconsumptionpower'
condition:
#- condition: state
#  entity_id: !input 'ichargerstatus'
#  state: charging
- condition: template
  value_template: '{{ (states(entChargerDynamicLimit)|int) != valCurrentAvailableForCharging
    }}'
- condition: time
  after: !input 'itimestart'
  before: !input 'itimeend'
action:
- service: easee.set_circuit_dynamic_limit 
  data:
    charger_id: '{{ state_attr(entChargerStatus,''id'') }}
      '
    current: '{{ valCurrentAvailableForCharging }}
      '
variables:
  entChargerDynamicLimit: !input 'ichargerdynamiclimit'
  entSolarPower: !input 'isolarpower'
  entConsumptionPower: !input 'iconsumptionpower'
  entL1Current: !input 'il1'
  entL2Current: !input 'il2'
  entL3Current: !input 'il3'
  entMaxCurrent: !input 'imaxfuse'
  entChargerCurrent: !input 'ichargercurrentactual'
  entChargerCurrentSlave: !input 'ichargercurrentactualslave'
  entChargingPower: !input 'ichargerpower'

  entChargerStatus: !input 'ichargerstatus'

  valCurrentAvailableForCharging: ' {% set chargeCurrentTotal =         (states(entChargerCurrent)|float)+(   states(entChargerCurrentSlave)|float)%} 
    {% set currentAvailableL1 =  (states(entMaxCurrent)|float - ((states(entL1Current)|float)-    (chargeCurrentTotal)))|int%} 
    {% set currentAvailableL2 =  (states(entMaxCurrent)|float - ((states(entL2Current)|float)-
    (chargeCurrentTotal)))|int%} 
    {% set currentAvailableL3 = (states(entMaxCurrent)|float - ((states(entL3Current)|float)-
    (chargeCurrentTotal)))|int%} 
    {% set currentAvailable = (currentAvailableL3)|float%} 
    {% if currentAvailableL2 < currentAvailableL3%}    
    {% set currentAvailable = currentAvailableL2 %}  
    {% endif %}    
    {% if (currentAvailableL1 < currentAvailable)%}    
    {% set currentAvailable = currentAvailableL1%}
    {% endif %}    
    {% set EaseeAvailableCurrent = (currentAvailable)|float %}     
    {% if EaseeAvailableCurrent < 0 %}      
    {% set EaseeAvailableCurrent = 0 %}     
    {% elif EaseeAvailableCurrent > 20%}    
    {% set EaseeAvailableCurrent = 20 %}      
    {% endif %}     
    {{ EaseeAvailableCurrent|int
    }}'
mode: restart
max_exceeded: silent